{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/covid19.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchdata","country","a","changeableUrl","axios","get","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","LineChart","length","labels","datasets","label","borderColor","fill","barchar","backgroundColor","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","fetchCountriesFunc","FormControl","formControl","NativeSelect","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","coronaImage","alt","React","Component","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.f01d2555.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__23_vH\",\"card\":\"Cards_card__J8Iis\",\"infected\":\"Cards_infected__19FR2\",\"recovered\":\"Cards_recovered__3uGZR\",\"deaths\":\"Cards_deaths__2U0gO\"};","import React from 'react';\r\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\r\nimport CountUp from 'react-countup'\r\nimport styles from './Cards.module.css';\r\nimport cx from 'classnames';\r\n\r\n\r\nconst Cards = ({data:{confirmed, recovered, deaths, lastUpdate}}) => {\r\n   if(!confirmed){\r\n       return '....Loading';\r\n   }\r\n    return (\r\n        <div className={styles.container}>\r\n            \r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card}  xs={12} md={3} className = {cx(styles.card,styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\" >\r\n                            <CountUp start={0}  end={confirmed.value} duration={2.5} separator=','/>\r\n                        </Typography>\r\n                        <Typography color='textSecondary' >{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='body2' >number of cases active of covid19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            \r\n                <Grid item component={Card}  xs={12} md={3} className = {cx(styles.card,styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\" >\r\n                        <CountUp start={0}  end={recovered.value} duration={2.5} separator=','/>\r\n                        </Typography>\r\n                        <Typography color='textSecondary' >{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='body2' >number of recovered cases  of covid19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n           \r\n                <Grid item component={Card}  xs={12} md={3} className = {cx(styles.card,styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\" >\r\n                        <CountUp start={0}  end={deaths.value} duration={2.5} separator=','/>\r\n                        </Typography>\r\n                        <Typography color='textSecondary' >{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='body2' >number of deaths caused by covid19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Cards;","import axios from 'axios';\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchdata = async (country) => {\r\n    let changeableUrl = url;\r\n    if(country){\r\n        changeableUrl = `${url}/countries/${country}`\r\n    }\r\n    try{\r\n        const {data :{confirmed, recovered, deaths, lastUpdate}}= await axios.get(changeableUrl);\r\n        return {confirmed, recovered, deaths, lastUpdate};\r\n    }\r\n    catch(error){\r\n        \r\n    }\r\n\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const {data} = await axios.get(`${url}/daily`)\r\n        return data.map((dailyData) => (\r\n            {confirmed:dailyData.confirmed.total,\r\n            deaths:dailyData.deaths.total,\r\n            recovered:dailyData.recovered.total,\r\n            date:dailyData.reportDate\r\n            }\r\n        ));\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const {data :{countries}} = await axios.get(`${url}/countries`)\r\n        return countries.map((country) => country.name);\r\n        \r\n    } catch (error) {\r\n        \r\n    }\r\n\r\n}\r\n","import React, {useState,useEffect} from 'react';\r\nimport {fetchDailyData} from '../../api';\r\nimport {Line, Bar} from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css'\r\nconst Chart = ({data:{confirmed,recovered,deaths},country}) => {\r\n    const [dailyData,setDailyData] = useState([]);\r\n\r\n\r\n    useEffect(()=>{\r\n        \r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n       \r\n            fetchAPI();\r\n      \r\n    },[]);\r\n    \r\n    const LineChart = (\r\n        dailyData.length?\r\n        (<Line\r\n            data = {{\r\n                labels:dailyData.map(({date})=> date),\r\n                datasets:[{\r\n                    \r\n                    data : dailyData.map(({confirmed})=> confirmed),\r\n                    label : 'Infected',\r\n                    borderColor : 'blue',\r\n                    fill : true,\r\n                },{\r\n                    \r\n                    data : dailyData.map(({deaths})=> deaths),\r\n                    label : 'Deaths',\r\n                    borderColor : 'red',\r\n                    fill : true,\r\n                },\r\n                {\r\n                    \r\n                    data : dailyData.map(({recovered})=> recovered),\r\n                    label : 'recovered',\r\n                    borderColor : 'green',\r\n                    fill : true,\r\n                }],\r\n            }}\r\n\r\n        />):null\r\n    );\r\n\r\n\r\n    const barchar = (\r\n        confirmed?\r\n       ( <Bar\r\n        data={{\r\n            labels:['Infected','Recovered','Deaths'],\r\n            \r\n            datasets:[{\r\n                label:'People',\r\n                backgroundColor:['rgba(0,0,255,0.5)','rgba(0,255,0,0.5)','rgba(255,0,0,0.5)'],\r\n                data:[confirmed.value,recovered.value,deaths.value]\r\n            }],\r\n            \r\n        }}\r\n        options={{\r\n            legend:{display:false},\r\n            title:{display:true,text:`Current state in ${country}`},\r\n        }}\r\n\r\n        />):null\r\n    );\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {country?barchar:LineChart}\r\n        </div>\r\n    )\r\n}\r\nexport default Chart;","import React,{useState,useEffect} from 'react';\r\nimport {NativeSelect,FormControl} from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\nimport {fetchCountries} from '../../api'\r\n\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n    const [fetchedCountries,setFetchedCountries] = useState([]);\r\n    useEffect(()=>{\r\n        const fetchCountriesFunc = async () => {\r\n            setFetchedCountries(await fetchCountries());\r\n        };\r\n        fetchCountriesFunc();\r\n        \r\n    },[fetchedCountries]);\r\n    \r\n    return (\r\n       \r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect onChange= {(e) => (handleCountryChange(e.target.value))}>\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries?fetchedCountries.map((country, i) => (<option key = {i} value={country}>{country}</option>)):<option>Select Country</option>}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\nexport default CountryPicker;","import React from 'react';\r\n\r\nimport {Cards, Chart, CountryPicker} from './components';\r\nimport styles from './App.module.css';\r\nimport {fetchdata} from './api/index';\r\nimport coronaImage from './images/covid19.png';\r\nclass App extends React.Component {\r\n    state ={\r\n        data :{},\r\n        country:'',\r\n    }\r\n    async componentDidMount(){\r\n        const fetchedData =await fetchdata();\r\n        this.setState({data:fetchedData});\r\n    }\r\n\r\n    handleCountryChange = async (country) => {\r\n        const fetchedData =await fetchdata(country);\r\n        this.setState({data:fetchedData});\r\n        this.setState({country:country});\r\n    }\r\n    render(){\r\n        const {data,country} = this.state;\r\n\r\n        return  (\r\n        <div className = {styles.container}>\r\n            <img className={styles.image} src={coronaImage} alt=\"COVID-19\"/>\r\n            <Cards data={data}/>\r\n            <CountryPicker handleCountryChange={this.handleCountryChange}  />\r\n            <Chart data={data} country={country}/>\r\n            \r\n        </div>\r\n        )\r\n        \r\n    }\r\n}\r\nexport default App;","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDom.render(<App/>, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2bvyT\",\"image\":\"App_image__1JcZn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__3yF74\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__3QclP\"};","module.exports = __webpack_public_path__ + \"static/media/covid19.d7265326.png\";"],"sourceRoot":""}